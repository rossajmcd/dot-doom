;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file located at
;; https://gitlab.com/rossputin/dot-doom/-/blob/master/doom.org
;; You should make any changes there and regenerate it from Emacs org-mode
;; using org-babel-tangle (C-c C-v t)

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!

;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
;; (setq user-full-name "John Doe"
;;      user-mail-address "john@doe.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
;; (setq doom-theme 'doom-one)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
;; (setq org-directory "~/org/")

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
;; (setq display-line-numbers-type t)

;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.

(setq user-full-name "Ross McDonald"
      user-mail-address "email@rossputin.me")

(setq doom-font (font-spec :family "Fira Code" :size 14))

(add-to-list 'default-frame-alist '(inhibit-double-buffering . t))

(setq projectile-project-search-path "~/Projects/mine/")

(setq kill-whole-line t)

(setq display-line-numbers-type t)

(setq org-directory "~/org")

(use-package emmet-mode
:after(web-mode css-mode scss-mode)
:commands (emmet-mode emmet-expand-line yas/insert-snippet yas-insert-snippet company-complete)
:config
(setq emmet-move-cursor-between-quotes t)
(add-hook 'emmet-mode-hook (lambda () (setq emmet-indent-after-insert nil)))
(add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
(add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.
;(setq emmet-indentation 2)
(unbind-key "C-M-<left>" emmet-mode-keymap)
(unbind-key "C-M-<right>" emmet-mode-keymap)
:bind
("C-j" . emmet-expand-line)
((:map emmet-mode-keymap
         ("C-c [" . emmet-prev-edit-point)
         ("C-c ]" . emmet-next-edit-point)))
);end emmet mode

(use-package hydra
  :defer 2
  :bind ("C-c h" . hydra-clock/body))

(defhydra hydra-clock (:color blue)
    "
    ^Dracula UI Doom Snippets
    ^
    ^Snippet^             ^abbr^
    ^─────^─────────────^──^─────────
    dpw               dracula paragraph
    dulp              dracula ul purple list style
    dh3pc             dracula h3 purple cyan
    dh4pc             dracula h4 purple cyan
    "
    ("q" nil))

(use-package! writeroom-mode
  :bind
  ("C-c d" . writeroom-mode)
  ;;:hook
  ;;(org-mode . writeroom-mode)
  ;;(w3m-mode . writeroom-mode)
  ;;:config
  ;;(advice-add 'text-scale-adjust :after
              ;;#'visual-fill-column-adjust)

  ;;;https://github.com/joostkremers/writeroom-mode#fullscreen-effect
  ;;(setq writeroom-fullscreen-effect 'maximized)
)

(global-set-key (kbd "M-n")
    (lambda () (interactive) (forward-line  5)))
(global-set-key (kbd "M-p")
    (lambda () (interactive) (forward-line -5)))
